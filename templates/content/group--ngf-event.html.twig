{#
/**
 * @file
 * Default theme implementation to display a group.
 *
 * Available variables:
 * - group: The group entity with limited access to object properties and
 *   methods. Only "getter" methods (method names starting with "get", "has",
 *   or "is") and a few common methods such as "id" and "label" are available.
 *   Calling other methods (such as group.delete) will result in an exception.
 * - label: The title of the group.
 * - content: All group items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the
 *   printing of a given child element.
 * - url: Direct URL of the current group.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - group: The current template type (also known as a "theming hook").
 *   - group--[type]: The current group type. For example, if the group is a
 *     "Classroom" it would result in "group--classroom". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - group--[view_mode]: The View Mode of the group; for example, a
 *     teaser would result in: "group--teaser", and full: "group--full".
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_group()
 *
 * @ingroup themeable
 */
#}

  {# block postinfo #}
  {% block postinfo %}
    {#{% include "@patterns/post_info/pattern-postinfo-new.html.twig"#}
      {#with {#}
        {#author_pic_uri: file_url(group.uid.entity.user_picture.entity.uri.value|image_style('thumbnail')),#}
        {#profile_name: group.uid.entity.name.value,#}
        {#profile_uri: path('entity.user.canonical', {'user': user.id}),#}
        {#creation_date: group.created.value|time_diff,#}
        {#group_logo: file_url(content.field_ngf_cover_image|field_target_entity.field_media_image.entity.uri.value|image_style('thumbnail')),#}
        {#group_name: 'todo',#}
        {#login_check: logged_in,#}
      {#}#}
    {#%}#}

    {% include "@patterns/post_info/pattern-postinfo-new.html.twig"
      with {
        title: group.label(),
        image_url: file_url(group.field_media_image.entity.uri.value|image_style('thumbnail')),
            url: path('entity.user.canonical', {'user': user.id}),
            logged_in: logged_in,
            context_text: ngf_context_text,
            subpic: ngf_sub_picture,
            container_class: ngf_group_container_class,
      }
    %}

  {% endblock postinfo %}
  {# end block postinfo #}

  {# block coverimage #}
  {% block coverimage %}

    {% if group.field_media_image %}
      <img src="{{ group.field_media_image.entity.uri.value|image_style('media_large') }}" class="responsive" alt="{{ group.label }}" >
    {% endif %}
    
  {% endblock coverimage %}

  {% block eventdata %}
    {# convert date to an integer stamp #}
    {% set event_start_date = group.field_ngf_event_start_date.value|date('U') %}
    {# Convert event_end_date to an integer stamp if not empty #}  
    {% if group.field_ngf_event_end_date is not empty %}
      {% set event_end_date = group.field_ngf_event_end_date.value|date('U') %}
    {% else %}
      {% set event_end_date = NULL %}
    {% endif %}
    
    {# Event year #}  
    {% set event_start_date_year = event_start_date|date('Y') %}
    {% set event_end_date_year = event_end_date|date('Y') %}

    {# Event month #}  
    {% set event_start_date_month = event_start_date|date('m') %}
    {% set event_end_date_month = event_end_date|date('m') %} 

    {# Start date & end date the same #}   

    <div class="event-dates">
      <h3>{% trans %} When {% endtrans %}</h3>
      {% if event_end_date is null %}
        <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month_year') }}</span></time>
      {% else %}
        {# same month same year #}
        {% if (event_start_date_month == event_end_date_month) and (event_start_date_year == event_end_date_year) %}
          <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day') }}</span></time>
          <span>-</span> 
          <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time> 
        {# different month same year #}
        {% elseif (event_start_date_month != event_end_date_month) and (event_start_date_year == event_end_date_year) %}
           <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month') }}</span></time>
           <span>-</span> 
           <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time> 
        {# different year for event start date & end date #}
        {% elseif (event_start_date_year != event_end_date_year) %}
           <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month_year') }}</span></time>
           <span>-</span> 
           <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time>
        {% endif %}
      {% endif %}
    </div>
  {% endblock eventdata %}  