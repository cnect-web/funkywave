{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <div class="post-info post-info--group clearfix">
      {{ author_picture }}
      <div{{ author_attributes.addClass('post-info__details') }}>
        <h4 class="post-info__author">{% trans %} by {{ author_name }} {% endtrans %}</h4>
        <p class="post-info__metadata">{{ metadata }}</p>
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('node__content') }}>

  {# convert date to an integer stamp #}
  {% set event_start_date = node.field_ngf_event_start_date.value|date('U') %}
  {# Convert event_end_date to an integer stamp if not empty #}  
  {% if node.field_ngf_event_end_date is not empty %}
    {% set event_end_date = node.field_ngf_event_end_date.value|date('U') %}
  {% else %}
    {% set event_end_date = NULL %}
  {% endif %}
  
  {# Event year #}  
  {% set event_start_date_year = event_start_date|date('Y') %}
  {% set event_end_date_year = event_end_date|date('Y') %}

  {# Event month #}  
  {% set event_start_date_month = event_start_date|date('m') %}
  {% set event_end_date_month = event_end_date|date('m') %} 

  {# Start date & end date the same #}   

  <div class="event-dates">
  <h3>{% trans %} When {% endtrans %}</h3>
  {% if event_end_date is null %}
    <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month_year') }}</span></time>
  {% else %}
    {# same month same year #}
    {% if (event_start_date_month == event_end_date_month) and (event_start_date_year == event_end_date_year) %}
      <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day') }}</span></time>
      <span>-</span> 
      <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time> 
    {# different month same year #}
    {% elseif (event_start_date_month != event_end_date_month) and (event_start_date_year == event_end_date_year) %}
       <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month') }}</span></time>
       <span>-</span> 
       <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time> 
    {# different year for event start date & end date #}
    {% elseif (event_start_date_year != event_end_date_year) %}
       <time><span class="event-start-date">{{ event_start_date|format_date('ngf_day_month_year') }}</span></time>
       <span>-</span> 
       <time><span class="event-end-date">{{ event_end_date|format_date('ngf_day_month_year') }}</span></time>
    {% endif %}
  {% endif %}
  </div>

  {# Event Location #}

  {% if node.field_ngf_address is not empty %}
    <div class="event-location">
      <h3>{% trans %} Location {% endtrans %}</h3>
      {{ content.field_ngf_venue|field_value }}
      {{ content.field_ngf_address|field_value }}
    </div>
  {% endif %}

  {# Integration Button component for registration event #}

  {% set event_registration_url = content.field_ngf_registration_link|field_raw('uri') %}
  {% set event_registration_title = content.field_ngf_registration_link|field_raw('title') %}

  {% if event_registration_url is not empty %}
    {% include "@patterns/button/pattern-button.html.twig" 
      with{
      url: event_registration_url,
      title: event_registration_title
    }
  %}
  {% endif %} 

  {# Event content #}

  {{ content.field_ngf_description }}
  
  {{ kint(content|keys) }}

  </div>

</article>