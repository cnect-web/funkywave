<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\Core\Link;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use \Drupal\Core\Url;


/**
* Implement template_preprocess_node().
*/
function funkywave_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $view_mode = $variables['view_mode'];
  $display_modes = [
    'full',
    'teaser',
    'ngf_teaser_user_commented',
    'ngf_teaser_user_created',
    'ngf_follow_up',
  ];

  if (in_array($view_mode, $display_modes)
    && $node->getType() == 'ngf_discussion') {

    $variables['ngf_sub_picture'] = NULL;
    $variables['ngf_context_text'] = t(
      'Posted @created_date ago', [
        '@created_date' => \Drupal::service('date.formatter')->formatTimeDiffSince($node->created->value)
    ]);

    $variables['ngf_group_container_class'] = 'profile-shortinfo--no-group';
    if (isset($node->group) && $group = $node->group) {
      _funkywave_group_context($node, $node->group, $variables);
    } elseif ($view_mode == 'ngf_teaser_user_commented') {
      $variables['ngf_context_text'] = t('Commented');
    }

    $variables['classes'] = [
      'newsfeed__item',
      'newsfeed__item--' . $node->bundle(),
      $node->isPromoted() ? 'newsfeed__item--promoted' : '',
      $node->isSticky() ? 'newsfeed__item--sticky' : '',
      !$node->isPublished() ? 'node--unpublished newsfeed__item--unpublished' : '',
      'newsfeed__item--' . $view_mode,
    ];
  }
}

function _funkywave_group_context($entity, $group, &$variables) {
  $variables['ngf_group_container_class'] = 'profile-shortinfo--group';

  if (!$group->field_ngf_cover_image->isEmpty()) {
    $media_id = $group->get('field_ngf_cover_image')->target_id;
    $media_entity = Media::load($media_id);

    $render = [
      '#theme' => 'image_style',
      '#style_name' => 'thumbnail',
      '#uri' => $media_entity->get('field_media_image')->entity->getFileUri(),
      '#attributes' => ['class' => ['profile-shortinfo__picture profile-shortinfo__picture--group responsive']]
    ];

    $link_render = [
      '#title' => $render,
      '#type' => 'link',
      '#url' => $group->toUrl(),
      '#attributes' => [
        'class' => [
          'profile-shortinfo__link profile-shortinfo__link--group'
        ]
      ]
    ];
    $variables['ngf_sub_picture'] = $link_render;
  }

  $variables['ngf_context_text'] = t(
      'Posted @created_date ago in <a href=":group_url" class="profile-shortinfo__link profile-shortinfo__group-link">@group_title</a>',
      [
        '@created_date' => \Drupal::service('date.formatter')->formatTimeDiffSince($entity->created->value),
        ':group_url' => $group->url(),
        '@group_title' => $group->label(),
      ]
    );
}

function funkywave_preprocess_user(&$vars) {
  $user = $vars['user'];

  $view_mode = $vars['elements']['#view_mode'];
  $user_id = $user->id();

  if (!empty($user->user_picture->entity)) {
    $cover_image = $user->user_picture->entity->getFileUri();
    $vars['user_pic'] = ImageStyle::load('thumbnail')->buildUrl($cover_image);
  }
  $vars['user_name'] = $user->getUsername();
  $vars['full_name'] = $user->full_name->value;
  $vars['profile_uri'] = Url::fromRoute('ngf_user_profile.page.profile', [
    'user' => $user_id,
  ])->toString();

  if (\Drupal::routeMatch()->getRouteName() == 'ngf_user_profile.page.user_about') {
    $vars['profile_uri_back'] = $vars['profile_uri'];
    $vars['profile_uri_more'] = '';
  }
  else {
    $vars['profile_uri_back'] = '';
    $vars['profile_uri_more'] = Url::fromRoute('ngf_user_profile.page.user_about', [
      'user' => $user_id,
    ])->toString();
  }

}

/**
* Implements template_preprocess_group
*/
function funkywave_preprocess_group(&$variables) {
  $group = $variables['group'];
  $view_mode = $variables['view_mode'];

  if ($group->getGroupType()->id() == 'ngf_event') {

    $display_modes = [
      'full',
      'teaser',
      'ngf_follow_up',
    ];

    if (in_array($view_mode, $display_modes)) {
      // This is needed so the group name is printed along with {{content}}.
      $variables['content']['label']['#printed'] = FALSE;
      if (!empty($group->group)) {
        _funkywave_group_context($group, $group->group, $variables);
      }
    }

  }
  else if ($group->getGroupType()->id() == 'ngf_discussion_group') {

    $display_modes = [
      'teaser',
      'ngf_user_created',
    ];

    if (in_array($view_mode, $display_modes)) {
      $variables['ngf_group_container_class'] = 'profile-shortinfo--no-group';
      if ($group->field_ngf_group_visibility->value == NGF_GROUP_PUBLIC) {
        $variables['ngf_context_text'] = t('Public group');
      }
      elseif ($group->field_ngf_group_visibility->value == NGF_GROUP_PRIVATE) {
        $visibility_icon = 'fa fa-lock';
        $variables['ngf_context_text'] = '<i class="' . $visibility_icon . '"></i> ' . t('Private group');
      }
      elseif ($group->field_ngf_group_visibility->value == NGF_GROUP_SECRET) {
        $visibility_icon = 'fa fa-eye-slash';
        $variables['ngf_context_text'] = '<i class="' . $visibility_icon . '"></i> ' . t('Secret group');
      }
    }

    if ($view_mode == 'ngf_header') {
      if (\Drupal::routeMatch()->getRouteName() == 'ngf_group.page.info') {
        $variables['profile_uri_back'] = $group->url();
        $variables['profile_uri_more'] = '';
      }
      else {
        $variables['profile_uri_back'] = '';
        $variables['profile_uri_more'] = Url::fromRoute('ngf_group.page.info', [
          'group' => $group->id(),
        ])->toString();
      }
    }

  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter()
 * Create theme suggestions for user profile templates
**/
function funkywave_theme_suggestions_user_alter(&$suggestions, array $variables) {
  $viewmode = $variables['elements']['#view_mode'];
  $suggestions[] = 'user__' . $viewmode;
}

/**
 * Implements hook_theme_form_alter()
 * The form id becomes the data attribute on the input fields and submit button
**/
function funkywave_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#id'];
  $suggestion = str_replace(['-'], '_', $form['#id']);
  $form['keys']['#attributes']['data-twig-suggestion'] = $suggestion;
}

/**
 * theme suggestions input alter to create the completely custom and flexible template suggestion
**/
function funkywave_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . $element['#type'] . '__' . $suggestion_suffix;
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function funkywave_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'container__' . $element['#type'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function funkywave_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Get Request Object.
  $request = \Drupal::request();

  // If there is HTTP Exception..
  if ($exception = $request->attributes->get('exception')) {
    // Get the status code.
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__error';
      $suggestions[] = 'page__error__' . $status_code;
    }
  }
}
